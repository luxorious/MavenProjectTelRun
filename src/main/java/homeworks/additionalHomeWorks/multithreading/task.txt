1. Дан массив n-элементов. Вычислить колличество заданного символа K.
Выполнить обработку массива двумя способами: без потоков и с потоками.

////////////////////////////////////////////////////////////////////////////////////////////////////////////
2. Создать три потока, каждый из которых выводит определенную букву(A, B и C) 5 раз,
порядок должен быть именно ABСABСABС. Используйте wait/notify/notifyAll.

3. Написать класс МФУ на котором возможны одновременная печать и сканирование документов,
при этом нельзя одновременно печатать два документа или сканировать (при печати
в консоль выводится сообщения "отпечатано 1, 2, 3,... страницы", при сканировании
то же самое только "отсканировано...", вывод в консоль с периодом в 50 мс.)

4. Написать метод, в котором 3 потока построчно пишут данные в файл (штук по 10 записей, с периодом в 20 мс)

5. Написать класс Counter, в котором есть одно целочисленное поле count (инициализировано нулем).
В классе реализовать два метода add и sub. Первый метод увеличивает значение count на 1,
второй - уменьшает на 1. Запустить два потока: в первом в цикле (можно 100 раз) вызвать
метод add, во втором потоке столько же раз вызвать метод sub. В цикле, после каждой итерации,
лучше поставить Thread.sleap, чтобы лучше смоделировать ситуацию. Добиться синхронизацией потоков,
чтобы значение count после всех операций было равно 0. Пример, одного потока:
Thread thread1 = new Thread(() -> {
            for (int i = 0; i < 10; i++) {
                count.add();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });

6. Написать программу, моделирующую работу порта. Корабли могут заходить в порт
для разгрузки / загрузки контейнеров. Количество контейнеров, находящихся в текущий
момент в порту и на корабле, не должно превышать заданную грузоподъемность судна и
емкость порта. В порту работает несколько причалов. В одном причале может стоять
только один корабль. Корабль может загружаться у причала, разгружаться или выполнять оба действия.
Нужны любые Ваши идеи. Можете даже менять условие задачи (упростить, например), но
модель многопоточной системы должна работать.

7. Написать программу, моделирующую работу библиотеки. В библиотеке доступны к
чтению несколько книг. Некоторые из них можно выдавать на руки некоторые только
в читальный зал. Посетители могут брать одновременно по несколько книг на руки
и в читальный зал. Использовать можно все знания из Java, включая многопоточность.

8. Создать класс, который может выполнять «тесты», в качестве тестов выступают
классы с наборами методов с аннотациями @Test. Для этого у него должен быть
статический метод start(), которому в качестве параметра передается или объект типа Class,
или имя класса. Из «класса-теста» вначале должен быть запущен метод с аннотацией @BeforeSuite
если такой имеется, далее запущены методы с аннотациями @Test, а по завершению всех
тестов – метод с аннотацией @AfterSuite. К каждому тесту необходимо также добавить
приоритеты (int числа от 1 до 10), в соответствии с которыми будет выбираться порядок
их выполнения, если приоритет одинаковый то порядок не имеет значения. Методы с
аннотациями @BeforeSuite и @AfterSuite должны присутствовать в единственном
экземпляре, иначе необходимо бросить RuntimeException при запуске «тестирования».
Примечание: это домашнее задание никак не связано с темой тестирования через
JUnit и использованием этой библиотеки, то есть проект пишется с нуля.

9. Описать концепцию, модель, на основании реального явления, где бы можно было
использовать синхронизацию потоков + wait() и notify(). Описать ясно и подробно.
Реализовать свою концепцию в виде кода на Java

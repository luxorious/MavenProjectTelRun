Дополнительные задания (лекция 1).


1. * (junior lvl)
Написать программу, которая определяет, является ли строка палиндромом.
Палиндром - это буквосочетание, слово или текст, одинаково читающееся в обоих направлениях.
Иногда палиндромом называют любой симметричный относительно своей середины набор символов,
например: "racecar", "level", "sum summus mus", "А роза упала на лапу Азора".

Создать класс SkillDesksHomeWork.homework1.homeWork1.SkillDesksHomeWork.homeWork5.task1.SkillDesksHomeWork.homeWork5.task1.Palindrome, который реализует следующий метод:

    boolean isPalindrome(String text)

метод возвращает true, если строка является палиндромом,
в противном случае возвращается false.

Ограничения:
- Логику проверки необходимо реализовать при помощи массивов;
- Регистр букв (верхний/нижний) при проверке необходимо игнорировать (LeVEl = level);

Перед реализацией метода isPalindrome() создайте класс PalindromeTest
и в нём напишите тесты. Так как реализация метода isPalindrome()
будет пуста (например всегда будет возвращать false) то тесты будут
не проходить. После того как вы написали тесты можете приступать
к реализации самого метода isPalindrome(). После того как вы закончите
все ваши тесты должны проходить. В конце обязательно напишите тест
на негативный сценарий и убедитесь в том, что он тоже работает.

2. * (junior lvl)
Разработать класс с методом, который копирует числа в заданном диапазоне
из одного массива в другой:

int[] copyInRange(int[] in, int numberFrom, int numberTo)

Данный метод должен вернуть новый массив, который содержит
только те числа, которые больше или равны numberFrom и меньше или равны numberTo.
Размер выходного массива должен быть равен количеству элементов в нём.

Логику необходимо реализовать в отдельном классе ArrayCopy.

Написать тестовые сценарии для класса ArrayCopy в классе ArrayCopyTest.
Все тестовые сценарии должны отрабатывать без ошибок.



3. *** (senior lvl)
Создать класс UserEntity с учетом, что вы уже знаете, что такое инкапсюляция.
У класса UserEntity должны быть поля:
  - id
  - имя
  - фамилия
  - персональный код

 Создайте класс репозиторий для работы с UserEntity
Функциональные требования:
  - сохранение пользователя
  - получение пользователя по id
  - получение пользователей по имени
  - получение всех пользователей

Дополнительное задание 1:
  - редактирование пользователя
  - удаление пользователя


Примечание:
  Пользователи должны быть уникальными по персональному коду
  У каждого пользователя есть уникальный идентификатор - id

    public HashMap<Integer, List<String>> editUser(int identification, String name,
                                                  String surname, String password) {
        for (int i : this.users.keySet()) {
            if (i == identification && password.equals(this.users.get(i).get(2))) {
                Scanner scanner = new Scanner(System.in);
                System.out.println("Enter new password");
                String newPassword = scanner.nextLine();
                this.users.put(identification, aditionalHomeWorks.Arrays.asList(name, surname, newPassword));
                return this.users;
            }
        }

        return this.users;
    }